// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String   @unique @db.VarChar(255)
  passwordHash   String?  @map("password_hash") @db.VarChar(255)
  name           String   @db.VarChar(100)
  provider       String   @default("email") @db.VarChar(50)
  providerId     String?  @map("provider_id") @db.VarChar(255)
  emailVerified  Boolean  @default(false) @map("email_verified")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  invitations Invitation[]

  @@map("users")
}

model Invitation {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  title              String    @db.VarChar(200)
  groomName          String    @map("groom_name") @db.VarChar(100)
  brideName          String    @map("bride_name") @db.VarChar(100)
  weddingDate        DateTime  @map("wedding_date") @db.Date
  weddingTime        DateTime  @map("wedding_time") @db.Time(6)
  venueName          String    @map("venue_name") @db.VarChar(200)
  venueAddress       String    @map("venue_address")
  venueLat           Decimal?  @map("venue_lat") @db.Decimal(10, 8)
  venueLng           Decimal?  @map("venue_lng") @db.Decimal(11, 8)
  templateId         String    @map("template_id") @db.VarChar(50)
  customMessage      String?   @map("custom_message")
  dressCode          String?   @map("dress_code") @db.VarChar(100)
  parkingInfo        String?   @map("parking_info")
  mealInfo           String?   @map("meal_info")
  specialNotes       String?   @map("special_notes")
  rsvpEnabled        Boolean   @default(true) @map("rsvp_enabled")
  rsvpDeadline       DateTime? @map("rsvp_deadline") @db.Date
  invitationCode     String    @unique @map("invitation_code") @db.VarChar(8)
  backgroundImageUrl String?   @map("background_image_url") @db.VarChar(500)
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  template       Template         @relation(fields: [templateId], references: [id])
  rsvpResponses  RsvpResponse[]
  invitationViews InvitationView[]

  @@index([userId])
  @@index([invitationCode])
  @@map("invitations")
}

model RsvpResponse {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invitationId     String            @map("invitation_id") @db.Uuid
  guestName        String            @map("guest_name") @db.VarChar(100)
  guestPhone       String?           @map("guest_phone") @db.VarChar(20)
  attendanceStatus AttendanceStatus  @map("attendance_status")
  adultCount       Int               @default(1) @map("adult_count")
  childCount       Int               @default(0) @map("child_count")
  message          String?
  submittedAt      DateTime          @default(now()) @map("submitted_at") @db.Timestamptz(6)

  // Relations
  invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@index([invitationId])
  @@map("rsvp_responses")
}

model InvitationView {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invitationId String    @map("invitation_id") @db.Uuid
  ipAddress    String?   @map("ip_address") @db.Inet
  userAgent    String?   @map("user_agent")
  viewedAt     DateTime  @default(now()) @map("viewed_at") @db.Timestamptz(6)
  viewDuration Int?      @map("view_duration") // in seconds

  // Relations
  invitation Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)

  @@index([invitationId])
  @@map("invitation_views")
}

model Template {
  id              String   @id @db.VarChar(50)
  name            String   @db.VarChar(100)
  category        TemplateCategory
  previewImageUrl String   @map("preview_image_url") @db.VarChar(500)
  cssStyles       Json     @map("css_styles")
  htmlStructure   String   @map("html_structure")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  invitations Invitation[]

  @@index([category])
  @@map("templates")
}

enum AttendanceStatus {
  attending
  not_attending

  @@map("attendance_status")
}

enum TemplateCategory {
  classic
  modern
  romantic
  minimal

  @@map("template_category")
}